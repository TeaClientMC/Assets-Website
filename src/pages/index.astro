---
// Import necessary Node.js modules
import Assets from "../components/assets.astro";
import Layout from "../layouts/layout.astro";
import fs from "fs";
import path from "path";

// Function to safely join paths and handle errors
function safeJoinPath(...paths: string[]) {
  try {
    return path.join(...paths);
  } catch (error) {
    console.error("Error joining paths:", error);
    return ""; // Return an empty string or a default path if needed
  }
}

// Function to ensure a directory exists and create it if it doesn't
function ensureDirExists(dir: string) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// Define the paths to the directories
let imagesDir = safeJoinPath(process.cwd(), "public", "images");
let cssDir = safeJoinPath(process.cwd(), "public", "css");
let jsDir = safeJoinPath(process.cwd(), "public", "js");

// Check if directories exist before proceeding
if (
  !fs.existsSync(imagesDir) ||
  !fs.existsSync(cssDir) ||
  !fs.existsSync(jsDir)
) {
  console.error("One or more directories do not exist:", {
    imagesDir,
    cssDir,
    jsDir,
  });
  // Default to "public" directory if any of the specified directories do not exist
  const defaultPublicDir = safeJoinPath(process.cwd(), "public");
  ensureDirExists(defaultPublicDir); // Ensure the default public directory exists
  imagesDir = safeJoinPath(defaultPublicDir, "images");
  cssDir = safeJoinPath(defaultPublicDir, "css");
  jsDir = safeJoinPath(defaultPublicDir, "js");
  // Ensure the default directories exist
  ensureDirExists(imagesDir);
  ensureDirExists(cssDir);
  ensureDirExists(jsDir);
}

// Remove the duplicate declarations of imagesDir, cssDir, and jsDir
// let imagesDir = safeJoinPath(process.cwd(), "public", "images");
// let cssDir = safeJoinPath(process.cwd(), "public", "css");
// let jsDir = safeJoinPath(process.cwd(), "public", "js");

// Check if directories exist before proceeding
if (
  !fs.existsSync(imagesDir) ||
  !fs.existsSync(cssDir) ||
  !fs.existsSync(jsDir)
) {
  console.error("One or more directories do not exist:", {
    imagesDir,
    cssDir,
    jsDir,
  });
  // Default to "public" directory if any of the specified directories do not exist
  const defaultPublicDir = path.join(process.cwd(), "public");
  imagesDir = safeJoinPath(defaultPublicDir, "images");
  cssDir = safeJoinPath(defaultPublicDir, "css");
  jsDir = safeJoinPath(defaultPublicDir, "js");
}
// Function to read and sort files by last modified date, including type
function getFilesSortedByDate(dir: string, type: string) {
  const files = fs.readdirSync(dir).map((file) => ({
    name: file,
    modified: fs.statSync(path.join(dir, file)).mtime,
    type: type, // Add type property
  }));

  return files.sort((a, b) => b.modified.getTime() - a.modified.getTime());
}

// Read and sort the contents of the directories, including type
const sortedImages = getFilesSortedByDate(imagesDir, "images");
const sortedCss = getFilesSortedByDate(cssDir, "css");
const sortedJs = getFilesSortedByDate(jsDir, "js");

// Combine and sort all assets
const allAssets = [...sortedImages, ...sortedCss, ...sortedJs].sort(
  () => Math.random() - 0.5
);
---

<Layout title="Home">
  <body>
    <section class="mt-1">
      <ul>
        {
          allAssets.map((asset) => (
            <li>
              <Assets asset={asset} />
            </li>
          ))
        }
      </ul>
    </section>
  </body>
</Layout>
